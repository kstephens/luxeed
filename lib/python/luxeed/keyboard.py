#!/usr/bin/env python3.11
import usb.core
import usb.util
from key import LUXEED_NUM_OF_KEYS, key_for, key_iter
import time
from random import randint
import logging
from icecream import ic

#######################################

LUXEED_USB_VENDOR = 0x534B
LUXEED_USB_PRODUCT = 0x0600
LUXEED_USB_INTERFACE = 1
LUXEED_USB_ENDPOINT_DATA = 0x02
LUXEED_USB_ENDPOINT_CONTROL = 0x82
LUXEED_BLOCK_SIZE = 64

#######################################

class Keyboard:
  def __init__(self):
    self.dev = None
    self.key_data_dirty = True
    self.key_data = msg_00.copy()
    self.msg_sleep = 0.001
    self.chunk_sleep = 0  # 0.0001
    self.debug = False

  def open(self):
    assert self.dev is None
    dev = usb.core.find(idVendor=LUXEED_USB_VENDOR, idProduct=LUXEED_USB_PRODUCT)
    dev.set_configuration()
    dev.reset()
    usb.util.claim_interface(dev, LUXEED_USB_INTERFACE)
    self.dev = dev

  def close(self):
    assert self.dev is not None
    try:
      usb.util.release_interface(self.dev, LUXEED_USB_INTERFACE)
      self.dev.reset()
    except usb.core.USBError as exc:
      logging.warning('%s', exc)
    self.dev = None

  def is_open(self):
    return self.dev is not None

  def clear(self, color=(0, 0, 0)):
    for key in key_iter():
      self.set_key_color(key, color)

  def set_key_color(self, k, rgb):
    k = key_for(k)
    if k is None:
      return
    off = 0x37 + k.id * 3
    keys = self.key_data
    if keys[off + 0] == rgb[0] and keys[off + 1] == rgb[1] and keys[off + 2] == rgb[2]:
      return False
    keys[off + 0] = rgb[0]
    keys[off + 1] = rgb[1]
    keys[off + 2] = rgb[2]
    self.key_data_dirty = True
    return True

  def get_key_color(self, k):
    k = key_for(k)
    if k is None:
      return
    off = 0x37 + k.id * 3
    keys = self.key_data
    return (
      keys[off + 0],
      keys[off + 1],
      keys[off + 2],
    )

  def update(self, force = False):
    if not self.is_open():
      self.open()

    if not (force or self.key_data_dirty):
      return

    try:
      self.send_keys()
      self.key_data_dirty = False
    except usb.core.USBError as exc:
      self.close()
      self.open()

  def init(self):
    return

    self.send_msg(msg_with_checksum(msg_00))
    time.sleep(0.02)

    self.send_msg(msg_with_checksum(msg_ff))
    time.sleep(0.02)

    self.send_keys()

  def send_keys(self):
    msg_chk = msg_with_checksum(self.key_data)
    self.send_msg(msg_chk)

  def send_msg(self, msg, timeout = 1000):
    chunks = make_chunks(msg, LUXEED_BLOCK_SIZE)
    for chunk in chunks:
      # chunk = chunk[1:] # wMaxPacketSize???
      # Each chunk's write is prefixed with 0x02:
      data = [0x02] + chunk
      if self.debug:
        print('data:')
        print(dump_bytes(data))
      written = self.dev.write(LUXEED_USB_ENDPOINT_DATA, bytes(data), timeout)
      if self.debug:
        ic(written)
      if written != len(data):
        raise Exception(f'send_msg: expected {len(data)} sent {written}')
      time.sleep(self.chunk_sleep)
    time.sleep(self.msg_sleep)

    # read = self.dev.read(LUXEED_USB_ENDPOINT_DATA, 2, timeout)
    # ic(read)
# WARNING:root:[Errno 13] Access denied (insufficient permissions)
    # read = self.dev.read(LUXEED_USB_ENDPOINT_CONTROL, 2, timeout)
    # ic(read)


#######################################

def make_chunks(xs, n):
  n = max(1, n)
  return (xs[i : i + n] for i in range(0, len(xs), n))

def msg_with_checksum(msg):
  buf = list(msg).copy()
  # ic(len(msg))
  sum = 0
  # Note: this may be relative to the lenght of the chunked message.
  chksum_i = 0x14e  # 0x154 in concatenated chunked msg output.
  n_chunks = len(buf) // LUXEED_BLOCK_SIZE
  for i in range(len(buf)):
    sum += buf[i]
  # Ignore first byte:
  sum -= buf[chksum_i]
  sum -= (n_chunks - 1)
  sum &= 0xff
  buf[chksum_i] = sum
  # buf[chksum_i - 1] = 0
  return buf

#######################################

'''
   Parsed from ep01.txt as initialization, minus the leading 0x02.
   Chunks are sent 65 bytes long.
   Checksum appears at 0x14e.
   Each chunk starts with 0x02.
   Is msg[1..2] the length of the entire message?
   msg[1] == len(msg) // 0x100; msg[2] == len(msg) & 0x100
'''
msg_00 = [
  '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x01, 0x01, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
  '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0040:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0050:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0060:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0070:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0080:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0090:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00a0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00b0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  00c0:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00d0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00e0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00f0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0100:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0110:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
  '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
]

msg_ff = [
    '              f     0     1     2     3     4     5     6     7     8     9     a     b     c     d     e   ',
    '                                                 aa    bb                                                   ',
    '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x00, 0x16, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0040:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0050:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0060:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0070:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0080:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0090:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00a0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00b0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  00c0:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00d0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00e0:  ', 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    '  00f0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '  0100:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0110:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '                                                                                                       cc,',
  	' dd											        '
    '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6,
    '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,
  ]


msg_xx = [
    '              f     0     1     2     3     4     5     6     7     8     9     a     b     c     d     e   ',
    '                                                 aa    bb                                                   ',
    '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x00, 0x16, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0040:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0050:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0060:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0070:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0080:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0090:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00a0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00b0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  00c0:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00d0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00e0:  ', 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    '  00f0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '  0100:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0110:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '                                                                                                       cc,',
  	'   dd											          ',
    '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6,
    '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,
  ]

def list_to_bytes(lst):
  return list(filter(lambda x: type(x) != str, lst))

msg_00 = list_to_bytes(msg_00)
msg_ff = list_to_bytes(msg_ff)
msg_xx = list_to_bytes(msg_xx)

#######################################

def dump_bytes(chunk):
  line_size = 16
  pos = 0
  out = ''
  out += f'     :  ' + ' '.join([f'{pos:1x} ' for pos in range(line_size)]) + '\n'
  for elems in make_chunks(chunk, line_size):
    out += f'{pos:04x} : ' + ' '.join([f'{x:02x}' for x in elems]) + '\n'
    pos += line_size
  return out

#######################################


# See: https://github.com/pyusb/pyusb/blob/master/docs/tutorial.rst
def list_all_usb_devices():
  for dev in usb.core.find(find_all=True):
      print(dev)

#######################################

def read_rgb_txt(file):
  import re
  colors = {}
  with open(file) as io:
    for line in io.readlines():
      if m := re.search(r'^\s*(\d+)\s+(\d+)\s+(\d+)\s+(.*)\s*$', line):
        rgb = (int(m[1]), int(m[2]), int(m[3]))
        name = m[4].strip()
        colors[name] = rgb
  return colors

colors_by_name = read_rgb_txt('lib/rgb.txt')

#######################################

def main():
  keyboard = Keyboard()
  keyboard.open()
  keyboard.init()

  def update():
    keyboard.update()
    time.sleep(0.05)

  while True:
    keyboard.clear()
    update()

    for i in range(100):
      color = (randint(0, 255), randint(0, 255), randint(0, 255))
      keyboard.clear(color)
      update()

    for key in key_iter():
      keyboard.clear()
      update()

      color = (randint(0, 255), randint(0, 255), randint(0, 255))
      keyboard.set_key_color(key, color)
      update()

    keyboard.clear()
    update()

    for i in range(100):
      key = randint(0, LUXEED_NUM_OF_KEYS - 1)
      color = (randint(0, 255), randint(0, 255), randint(0, 255))
      keyboard.set_key_color(key, color)
      update()

main()
