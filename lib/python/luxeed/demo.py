#!/usr/bin/env python3.11

import usb.core
import usb.util
import time
from icecream import ic

#######################################

LUXEED_USB_VENDOR = 0x534B
LUXEED_USB_PRODUCT = 0x0600
LUXEED_USB_INTERFACE = 1
LUXEED_USB_ENDPOINT_DATA = 0x02
LUXEED_USB_ENDPOINT_CONTROL = 0x82
LUXEED_BLOCK_SIZE = 64

#######################################

# See: https://github.com/pyusb/pyusb/blob/master/docs/tutorial.rst
def list_all_devices():
  for dev in usb.core.find(find_all=True):
      print(dev)

def main():
  # list_all_devices()

  dev = usb.core.find(idVendor=LUXEED_USB_VENDOR, idProduct=LUXEED_USB_PRODUCT)
  print(dev)
  ic(dev)

  dev.set_configuration()

  cfg = dev.get_active_configuration()
  #  print(cfg)
  ic(type(cfg))
  ic(cfg)

  intf = cfg[(LUXEED_USB_INTERFACE, 0)]
  ic(type(intf))
  ic(intf)
  print(intf)

  ep = usb.util.find_descriptor(
      intf,
      # match the first OUT endpoint
      custom_match = \
      lambda e: \
          e.bEndpointAddress == LUXEED_USB_ENDPOINT_DATA and \
          usb.util.endpoint_direction(e.bEndpointAddress) == \
          usb.util.ENDPOINT_OUT)

  ic(type(ep))
  ic(ep)
  print(ep)

  # intf = find_descriptor(...)
  # dev.set_interface_altsetting(intf)
  # intf.set_altsetting() # wow! Interface also has a method for it

  dev.reset()
  usb.util.claim_interface(dev, LUXEED_USB_INTERFACE)

  msg_chk = msg_with_checksum(msg_ff)
  print('msg_ff')
  print(dump_bytes(msg_ff))
  print('msg_chk')
  print(dump_bytes(msg_chk))
  assert dump_bytes(msg_ff) == dump_bytes(msg_chk)

  for i in range(10):
    send_msg(dev, msg_with_checksum(msg_00))
    time.sleep(1)

    send_msg(dev, msg_with_checksum(msg_ff))
    time.sleep(1)

def send_msg(dev, msg, timeout = 1000):
  chunks = make_chunks(msg, LUXEED_BLOCK_SIZE)
  for chunk in chunks:
    # chunk = chunk[1:] # wMaxPacketSize???
    # Each chunk's write is prefixed with 0x02:
    data = [0x02] + chunk
    # data = chunk
    print('data:')
    print(dump_bytes(data))
    written = dev.write(LUXEED_USB_ENDPOINT_DATA, bytes(data), timeout)
    ic(written)
    if written != len(data):
      raise Exception(f'write chunk: expected {len(data)} sent {written}')

  # expected response: 01 79
  # response = dev.read(LUXEED_USB_ENDPOINT_CONTROL, 2, timeout)
  # print('response:')
  # print(dump_bytes(response))

#######################################

def make_chunks(xs, n):
  n = max(1, n)
  return (xs[i : i + n] for i in range(0, len(xs), n))

def msg_with_checksum(msg):
  buf = list(msg).copy()
  ic(len(msg))
  sum = 0
  # Note: this may be relative to the lenght of the chunked message.
  chksum_i = 0x14e  # 0x154 in concatenated chunked msg output.
  n_chunks = len(buf) // LUXEED_BLOCK_SIZE
  for i in range(len(buf)):
    sum += buf[i]
  # Ignore first byte:
  sum -= buf[chksum_i]
  sum -= (n_chunks - 1)
  sum &= 0xff
  buf[chksum_i] = sum
  # buf[chksum_i - 1] = 0
  return buf

#######################################

'''
   Parsed from ep01.txt as initialization, minus the leading 0x02.
   Chunks are sent 65 bytes long.
   Checksum appears at 0x14e.
   Each chunk starts with 0x02.
   Is msg[1..2] the length of the entire message?
   msg[1] == len(msg) // 0x100; msg[2] == len(msg) & 0x100
'''
msg_00 = [
  '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x01, 0x01, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
  '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0040:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0050:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0060:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0070:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0080:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0090:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00a0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00b0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  00c0:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00d0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00e0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  00f0:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0100:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0110:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
  '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0,
  '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  '      :  ', 0x00,
]

msg_ff = [
    '              f     0     1     2     3     4     5     6     7     8     9     a     b     c     d     e   ',
    '                                                 aa    bb                                                   ',
    '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x00, 0x16, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0040:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0050:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0060:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0070:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0080:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0090:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00a0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00b0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  00c0:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00d0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00e0:  ', 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    '  00f0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '  0100:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0110:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '                                                                                                       cc,',
  	' dd											        '
    '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe6,
    '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,
  ]


msg_xx = [
    '              f     0     1     2     3     4     5     6     7     8     9     a     b     c     d     e   ',
    '                                                 aa    bb                                                   ',
    '  0000:  ',       0x02, 0x01, 0x80, 0x00, 0x00, 0x16, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
    '  0010:  ', 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0020:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0030:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0040:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0050:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0060:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0070:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  0080:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0090:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00a0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00b0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '      :  ', 0xff,

    '  00c0:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00d0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  00e0:  ', 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
    '  00f0:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '  0100:  ',       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    '  0110:  ', 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    '  0120:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0130:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,

    '                                                                                                       cc,',
  	'   dd											          ',
    '  0140:  ',       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6,
    '  0150:  ', 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0160:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '  0170:  ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    '      :  ', 0x00,
  ]

def list_to_bytes(lst):
  codes = filter(lambda x: type(x) != str, lst)
  return bytes(codes)

msg_00 = list_to_bytes(msg_00)
msg_ff = list_to_bytes(msg_ff)
msg_xx = list_to_bytes(msg_xx)

#######################################

def dump_bytes(chunk):
  line_size = 16
  pos = 0
  out = ''
  out += f'     :  ' + ' '.join([f'{pos:1x} ' for pos in range(line_size)]) + '\n'
  for elems in make_chunks(chunk, line_size):
    out += f'{pos:04x} : ' + ' '.join([f'{x:02x}' for x in elems]) + '\n'
    pos += line_size
  return out

#######################################

def read_rgb_txt(file):
  import re
  colors = {}
  with open(file) as io:
    for line in io.readlines():
      if m := re.search(r'^\s*(\d+)\s+(\d+)\s+(\d+)\s+(.*)\s*$', line):
        rgb = (int(m[1]), int(m[2]), int(m[3]))
        name = m[4].strip()
        colors[name] = rgb
  return colors

colors_by_name = read_rgb_txt('lib/rgb.txt')

#######################################

main()
